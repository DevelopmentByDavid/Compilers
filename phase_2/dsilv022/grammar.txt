program:            functions 
		        ;

functions:          /* empty */              
                |   function functions       
                ;

function:           FUNCTION IDENT SEMICOLON BEGIN_PARAMS declarations END_PARAMS BEGIN_LOCALS declarations END_LOCALS BEGIN_BODY statement SEMICOLON statements END_BODY  
                    
                ;

declarations:       /* empty */                         
                |   declaration SEMICOLON declarations  
                ;

declaration:        IDENT idents COLON ARRAY L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET OF INTEGER   
                |   IDENT idents COLON INTEGER                                                     
                ;

idents:             /* empty */         
                |   COMMA IDENT idents  
                ;

statements:         /* empty */                     
                |   statement SEMICOLON statements  
                ;

statement:          var ASSIGN expression                                                                       
                |   IF bool_expr THEN statement SEMICOLON statements ENDIF                                      
                |   IF bool_expr THEN statement SEMICOLON statements ELSE statement SEMICOLON statements ENDIF  
                |   WHILE bool_expr BEGINLOOP statement SEMICOLON statements ENDLOOP                            
                |   DO BEGINLOOP statement SEMICOLON statements ENDLOOP WHILE bool_expr                         
                |   READ var vars                                                                               
                |   WRITE var vars                                                                              
                |   CONTINUE                                                                                    
                |   RETURN expression                                                                           
                ;

bool_expr:          relation_and_expr bool_expressions                 
                ;

bool_expressions:   /* empty */                                         
                |   OR relation_and_expr bool_expressions               
                ;

relation_and_expr:      relation_expr relation_and_expressions          
                    ;

relation_and_expressions:   /* empty */                                 
                        |   AND relation_expr relation_and_expressions  
                        ;
relation_expr:              expression comp expression      
                        |   TRUE                            
                        |   FALSE                           
                        |   L_PAREN bool_expr R_PAREN       
                        |   NOT expression comp expression  
                        |   NOT TRUE                        
                        |   NOT FALSE                       
                        |   NOT L_PAREN bool_expr R_PAREN   
                        ;

comp:               EQ      
                |   NEQ     
                |   LT      
                |   GT      
                |   LTE     
                |   GTE     
                ;

expression:         multiplicative_expr expression_loop         
                ;

expression_loop:    /* empty */                                 
                |   ADD multiplicative_expr expression_loop     
                |   SUB  multiplicative_expr expression_loop    
                ;


expressions:        expression COMMA expressions    
                |   expression                      
                |   /* empty */                     
                ;

terms:              /* empty */             
                |   MOD term terms          
                |   DIV term terms          
                |   MULT term terms         
                ;

multiplicative_expr:        term terms      
                        ;

term:               IDENT L_PAREN expressions R_PAREN         
                |   NUMBER                                    
                |   var                                       
                |   L_PAREN expression R_PAREN                
                |   UMINUS NUMBER                             
                |   UMINUS var                                
                |   UMINUS L_PAREN expression R_PAREN         
                |   UMINUS IDENT L_PAREN expressions R_PAREN  
                ;

var:                IDENT                                                 
                |   IDENT L_SQUARE_BRACKET expression R_SQUARE_BRACKET    
                ;

vars:               /* empty */                 
                |   COMMA var vars              
                ;
